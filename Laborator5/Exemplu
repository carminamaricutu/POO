#include <iostream>
#include <conio.h>
#include <string>

using namespace std;

class Lista;
class Produse_magazin {
	int tip_derivat;
	string producator;
	int cod_produs;
	Produse_magazin *urm;
public:
	Produse_magazin(int t, string prod, int cod) {
		tip_derivat = t;
		producator = prod;
		cod_produs = cod;
		urm = NULL;
	}
	virtual void afisare() {
		cout << "_____________________________" << endl;
		cout << "PRODUCATOR:" << producator << endl;
		cout << "COD PRODUS:" << cod_produs << endl;
	}

	friend class Lista;
};

class  Scanere:public Produse_magazin
{
	string soft_inclus;
public:
	Scanere (int t, string prod, int cod, string soft) : Produse_magazin(t, prod, cod) {
		soft_inclus = soft;
	 }
	void afisare() {
		Produse_magazin::afisare();
		cout << "SOFT INCLUS:" << soft_inclus << endl;
	}
	friend class Lista;
};

class Imprimante :public Produse_magazin {
	string format;
public:
	Imprimante(int t, string prod, int cod, string form) : Produse_magazin(t, prod, cod) {
		format = form;
	}
	void afisare() {
		Produse_magazin::afisare();
		cout << "FORMAT:" << format << endl;
	}
	friend class Lista;
 };

class Lista {
public:
	Produse_magazin *head;
	void adaugare(Produse_magazin *prod);
	void afisare_lista();
};
void Lista::adaugare(Produse_magazin *a) {
	Produse_magazin *p;
	p = head;
	if (p) {
		if (a->producator <= p->producator) {
			a->urm = head;
			head = a;
		}
		else
		{
			while (p->urm && (p->urm)->producator == a->producator)
				p = p->urm;
			a->urm = p->urm;
			p->urm = a;
		}
	}
	else
		head = a;
}

void Lista::afisare_lista() {
	Produse_magazin *a;
	a = head;
	if (!a)
		cout << "Lista este vida!" << endl;
	else
	{
		while (a) {
			a->afisare();
			a = a->urm;
		}
	}
}

void introducere(Lista &l, int x) {

	//int Tip_derivat;
	string Producator;
	int Cod_produs;
	string Soft_inclus;
	string Format;
	Produse_magazin *prodMag;
	cin.get();

	cout << "Introduceti producator:"; getline(cin, Producator);
	cout << "Introduceti codul de produs:"; cin >> Cod_produs;
	//cin.get();

	if (x == 0) {
		Scanere *SC;
		cin.get();

		cout << "Introduceti softul inclus:"; getline(cin, Soft_inclus);
		SC = new Scanere(1, Producator, Cod_produs, Soft_inclus);
		prodMag = SC;
		l.adaugare(prodMag);
	}
	else if (x == 1) {
		Imprimante *IMP;
		cin.get();

		cout << "Introduceti formatul imprimantei:"; getline(cin, Format);
		IMP = new Imprimante(2, Producator, Cod_produs, Format);
		prodMag = IMP;
		l.adaugare(prodMag);
	}
}

int main() {

	int opt;
	Lista l; 
	l.head = NULL;

	do {
		cout << "1. Adaugare scanere in lista, ordonat dupa producator.\n";
		cout << "2. Adaugare imprimante inlista, ordonat dupa producator.\n";
		cout << "3.Afisare articole din magazin.\n";
		cout << "0.Iesire.\n";
		cout << "Introduceti optiunea:"; cin >> opt;
		switch (opt) {
		case 1: introducere(l, 0);
			break;
		case 2: introducere(l, 1);
			break;
		case 3: l.afisare_lista(); break;
		case 0: break;
		default:cout << "OPTIUNE GRESITA!\n"; break;
		}
	} while (opt != 0);

	system("pause");
	return 0;
}
